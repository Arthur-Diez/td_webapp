// src/components/Tasks.jsx
import React, { useEffect, useState } from 'react';
import TaskCard from './TaskCard';

export default function Tasks({ date, telegramId, setConsoleData }) {
  const [tasks, setTasks] = useState([]);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    if (!telegramId || !date) {
      console.warn("‚õî –ù–µ—Ç UID –∏–ª–∏ –¥–∞—Ç—ã, fetch –Ω–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è");
      return;
    }
    (async () => {
      try {
        setLoading(true);
        const url = `https://td-webapp.onrender.com/tasks?uid=${telegramId}&date=${date}`;
        setConsoleData(prev => prev + `\nüì° Fetching: ${url}`);
        const res = await fetch(url);
        const data = await res.json();
        setConsoleData(prev => prev + `\nüì¶ Response: ${JSON.stringify(data, null, 2)}`);
        setTasks(!data.error ? data : []);
      } catch (e) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∑–∞–¥–∞—á:", e);
        setTasks([]);
      } finally {
        setLoading(false);
      }
    })();
  }, [telegramId, date, setConsoleData]);

  if (!telegramId) return <p style={{ textAlign: "center" }}>üîí –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</p>;
  if (loading) return <p style={{ textAlign: "center" }}>‚è≥ –ó–∞–≥—Ä—É–∂–∞—é –∑–∞–¥–∞—á–∏...</p>;
  if (tasks.length === 0) return <p style={{ textAlign: "center" }}>üì≠ –ù–µ—Ç –∑–∞–¥–∞—á –Ω–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å</p>;

  return (
    <div className="task-list">
      {tasks.map((task) => {
        const hasEnd  = !!task.end_dt;
        const start   = new Date(task.start_dt);
        const end     = hasEnd ? new Date(task.end_dt) : null;
        const expired = hasEnd && end < new Date();

        return (
          <div key={task.id} className={`task-card ${expired ? 'expired' : ''}`}>
            {!task.all_day && hasEnd && (
              <p className="task-time">
                üïí {start.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}‚Äì{end.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}
              </p>
            )}
            {task.all_day && <p className="task-time">üìÖ –í–µ—Å—å –¥–µ–Ω—å</p>}
            <h4>{task.title}</h4>
            <p>{task.description}</p>
          </div>
        );
      })}
    </div>
  );
}