// src/components/AddTaskSheet.jsx
import React, { useEffect, useMemo, useState } from "react";
import "./AddTaskSheet.css";
import WheelPicker from "./WheelPicker";
import { createTask } from "../utils/api";

const mm2 = (n) => String(n).padStart(2, "0");
const hours = Array.from({ length: 24 }, (_, h) => ({ label: mm2(h), value: h }));

// –º–∏–Ω—É—Ç—ã –¥–ª—è –∏–Ω–ª–∞–π–Ω-–ø–∞–Ω–µ–ª–∏ (—à–∞–≥ 15–º) –∏ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π (00‚Äì59)
const MINS15 = [0, 15, 30, 45].map((m) => ({ label: mm2(m), value: m }));
const MINS60 = Array.from({ length: 60 }, (_, m) => ({ label: mm2(m), value: m }));
// –æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ –∫ –±–ª–∏–∂–∞–π—à–µ–π —á–µ—Ç–≤–µ—Ä—Ç–∏ (0/15/30/45) –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ –∏–Ω–ª–∞–π–Ω-–∫–æ–ª—ë—Å–∞—Ö
const nearestQuarter = (m) => (Math.round(m / 15) * 15) % 60;

const DUR_PRESETS = [
  { label: "15m", m: 15 },
  { label: "30m", m: 30 },
  { label: "45m", m: 45 },
  { label: "1h", m: 60 },
  { label: "1h 30m", m: 90 },
];
const COLORS = ["#F06292", "#FFB74D", "#FFD54F", "#AED581", "#64B5F6", "#81C784", "#BA68C8"];

export default function AddTaskSheet({ open, onClose, telegramId, selectedDate }) {
  const [title, setTitle] = useState("");
  const [allDay, setAllDay] = useState(false);

  const now = new Date();
  const baseDateProp = selectedDate || now; // –∏–∑ —Ä–æ–¥–∏—Ç–µ–ª—è
  const [localDate, setLocalDate] = useState(baseDateProp); // –ª–æ–∫–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞ –≤–Ω—É—Ç—Ä–∏ —Ñ–æ—Ä–º—ã

  const roundToQuarter = (d) => {
    const ms = 15 * 60 * 1000;
    return new Date(Math.ceil(d.getTime() / ms) * ms);
  };

  // —Å—Ç–∞—Ä—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: –±–ª–∏–∂–∞–π—à–∞—è ¬´—á–µ—Ç–≤–µ—Ä—Ç—å¬ª —Å–µ–≥–æ–¥–Ω—è, –∏–Ω–∞—á–µ 10:00
  const defStart = useMemo(() => {
    const d = new Date(baseDateProp);
    if (new Date().toDateString() === d.toDateString()) return roundToQuarter(new Date());
    d.setHours(10, 0, 0, 0);
    return d;
    // eslint-disable-next-line
  }, [open]);

  const [sh, setSh] = useState(defStart.getHours()); // start hour
  const [sm, setSm] = useState(defStart.getMinutes() - (defStart.getMinutes() % 15)); // start minutes (–∫—Ä–∞—Ç–Ω–æ 15)
  const [duration, setDuration] = useState(15); // –≤ –º–∏–Ω—É—Ç–∞—Ö

  const [color, setColor] = useState(COLORS[0]);
  const [repeat, setRepeat] = useState("once"); // once|daily|weekly|monthly
  const [notes, setNotes] = useState("");
  const [subtasks, setSubtasks] = useState([]);

  const [isTimePickerOpen, setIsTimePickerOpen] = useState(false);
  const [isDurPickerOpen, setIsDurPickerOpen] = useState(false);

  // –¥–∞—Ç–∞/–≤—Ä–µ–º—è —Å—Ç–∞—Ä—Ç–∞ –∏ –∫–æ–Ω—Ü–∞ (–∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–π –¥–∞—Ç—ã + —à/–º)
  const startDate = useMemo(() => {
    const d = new Date(localDate);
    d.setHours(sh, sm, 0, 0);
    return d;
  }, [localDate, sh, sm]);

  const endDate = useMemo(() => {
    if (allDay) return null;
    const d = new Date(startDate);
    d.setMinutes(d.getMinutes() + duration);
    return d;
  }, [startDate, duration, allDay]);

  const totalHuman = useMemo(() => {
    const m = duration;
    const h = Math.floor(m / 60),
      mm = m % 60;
    if (h && mm) return `${h}—á ${mm}–º`;
    if (h) return `${h}—á`;
    return `${mm}–º`;
  }, [duration]);

  // —á—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –Ω–∞ –ò–ù–õ–ê–ô–ù-–∫–æ–ª—ë—Å–∞—Ö (–∫–≤–∞—Ä—Ç–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è)
const smInline = useMemo(() => nearestQuarter(sm), [sm]);
const endInlineMin = useMemo(() => {
  const end = new Date(startDate.getTime() + duration * 60000);
  return nearestQuarter(end.getMinutes());
}, [startDate, duration]);

  // —Å–±—Ä–æ—Å –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏
  useEffect(() => {
    if (!open) {
      setTitle("");
      setAllDay(false);
      setSm(defStart.getMinutes() - (defStart.getMinutes() % 15));
      setSh(defStart.getHours());
      setDuration(15);
      setNotes("");
      setSubtasks([]);
      setRepeat("once");
      setColor(COLORS[0]);
      setIsTimePickerOpen(false);
      setIsDurPickerOpen(false);
      setLocalDate(baseDateProp);
    }
    // eslint-disable-next-line
  }, [open]);

  const addSubtask = () => {
    const t = prompt("–ü–æ–¥–∑–∞–¥–∞—á–∞:");
    if (t) setSubtasks((s) => [...s, { id: Date.now(), text: t }]);
  };
  const removeSubtask = (id) => setSubtasks((s) => s.filter((x) => x.id !== id));

  const handleSubmit = async () => {
    if (!telegramId) return;
    if (!title.trim()) {
      alert("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏");
      return;
    }
    const dateISO = (d) => (d ? new Date(d).toISOString() : null);

    const payload = {
      telegram_id: telegramId,
      title: title.trim(),
      description: notes || null,
      start_dt: allDay
        ? new Date(new Date(localDate).setHours(0, 0, 0, 0)).toISOString()
        : dateISO(startDate),
      end_dt: allDay ? null : dateISO(endDate),
      all_day: allDay,
      for_user: null,
    };

    try {
      await createTask(payload);
      onClose();
    } catch (e) {
      alert(`–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: ${e.message}`);
    }
  };

  return (
    <div className={`sheet ${open ? "sheet--open" : ""}`}>
      <div className="sheet-backdrop" onClick={onClose} />

      <div className="sheet-panel" role="dialog" aria-modal>
        <div className="sheet-grabber" />

        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
        <div className="sheet-title">–ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞</div>

        {/* –ù–∞–∑–≤–∞–Ω–∏–µ + –∏–∫–æ–Ω–∫–∞ —Å–ª–µ–≤–∞ */}
        <div className="title-row">
          <div className="title-icon">@</div>
          <input
            className="title-input"
            placeholder="–û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –ø–æ—á—Ç—É"
            value={title}
            onChange={(e) => setTitle(e.target.value)}
          />
        </div>

        {/* –í–µ—Å—å –¥–µ–Ω—å */}
        <button className="row toggler" onClick={() => setAllDay((v) => !v)} type="button">
          <div className={`check ${allDay ? "check--on" : ""}`} />
          <div className="row-title">–ó–∞–¥–∞—á–∞ –Ω–∞ –≤–µ—Å—å –¥–µ–Ω—å</div>
        </button>

        {/* –ö–æ–≥–¥–∞? ‚Äî –∏–Ω–ª–∞–π–Ω 4 –∫–æ–ª—ë—Å–∏–∫–∞ + –¥–∞—Ç–∞ + ¬´–ü–æ–¥—Ä–æ–±–Ω–µ–µ‚Ä¶¬ª */}
        <div className="section">
          <div className="section-head">
            <div className="section-title">–ö–æ–≥–¥–∞?</div>
            <input
              className="date-btn"
              type="date"
              value={new Date(localDate).toISOString().slice(0, 10)}
              onChange={(e) => {
                const [y, m, d] = e.target.value.split("-").map(Number);
                const nd = new Date(localDate);
                nd.setFullYear(y, m - 1, d);
                setLocalDate(nd);
              }}
            />
          </div>

          {!allDay ? (
            <>
              <div className="time-inline">
                {/* –ß–ê–° –Ω–∞—á–∞–ª–∞ */}
                <WheelPicker ariaLabel="—á–∞—Å –Ω–∞—á–∞–ª–∞" values={hours} value={sh} onChange={setSh} />
                {/* –ú–ò–ù –Ω–∞—á–∞–ª–∞: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –±–ª–∏–∂–∞–π—à—É—é —á–µ—Ç–≤–µ—Ä—Ç—å, –∞ –ø—Ä–∏ –ø—Ä–æ–∫—Ä—É—Ç–∫–µ ‚Äî –ø—Ä—ã–≥–∞–µ–º –Ω–∞ –Ω–µ—ë */}
                <WheelPicker
                    ariaLabel="–º–∏–Ω—É—Ç—ã –Ω–∞—á–∞–ª–∞"
                    values={MINS15}
                    value={smInline}
                    onChange={(m) => setSm(m)}   // –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª —á–µ—Ç–≤–µ—Ä—Ç—å ‚Äî –¥–µ–ª–∞–µ–º –º–∏–Ω—É—Ç—É —Ä–æ–≤–Ω–æ –µ–π
                />
                {/* –ß–ê–° –∫–æ–Ω—Ü–∞ ‚Äî –º–µ–Ω—è–µ–º duration */}
                <WheelPicker
                  ariaLabel="—á–∞—Å –∫–æ–Ω—Ü–∞"
                  values={hours}
                  value={new Date(startDate.getTime() + duration * 60000).getHours()}
                  onChange={(h) => {
                    const curEnd = new Date(startDate.getTime() + duration * 60000);
                    const end = new Date(startDate);
                    end.setHours(h, curEnd.getMinutes(), 0, 0);
                    const m = Math.max(1, Math.round((end - startDate) / 60000));
                    setDuration(m);
                  }}
                />
                {/* –ú–ò–ù –∫–æ–Ω—Ü–∞: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –±–ª–∏–∂–∞–π—à—É—é —á–µ—Ç–≤–µ—Ä—Ç—å, –ø—Ä–∏ –ø—Ä–æ–∫—Ä—É—Ç–∫–µ –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º duration */}
                <WheelPicker
                    ariaLabel="–º–∏–Ω—É—Ç—ã –∫–æ–Ω—Ü–∞"
                    values={MINS15}
                    value={endInlineMin}
                    onChange={(m) => {
                        const curEnd = new Date(startDate.getTime() + duration * 60000);
                        const end = new Date(startDate);
                        end.setHours(curEnd.getHours(), m, 0, 0);
                        const minsDiff = Math.max(1, Math.round((end - startDate) / 60000));
                        setDuration(minsDiff);
                    }}
                />
              </div>

              <div className="addpanel-row" style={{ marginTop: 8 }}>
                <div className="addpanel-hint">
                  {mm2(startDate.getHours())}:{mm2(startDate.getMinutes())} ‚Äî{" "}
                  {mm2(endDate.getHours())}:{mm2(endDate.getMinutes())} ({totalHuman})
                </div>
                <button className="link" type="button" onClick={() => setIsTimePickerOpen(true)}>
                  –ü–æ–¥—Ä–æ–±–Ω–µ–µ‚Ä¶
                </button>
              </div>
            </>
          ) : (
            <div className="all-day-hint">üóì –í–µ—Å—å –¥–µ–Ω—å</div>
          )}
        </div>

        {/* –ö–∞–∫ –¥–æ–ª–≥–æ (–ø—Ä–µ—Å–µ—Ç—ã + –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏) */}
        {!allDay && (
          <div className="section">
            <div className="section-head">
              <div className="section-title">–ö–∞–∫ –¥–æ–ª–≥–æ?</div>
              <button className="link" type="button" onClick={() => setIsDurPickerOpen(true)}>
                –ü–æ–¥—Ä–æ–±–Ω–µ–µ‚Ä¶
              </button>
            </div>
            <div className="chips">
              {DUR_PRESETS.map((p) => (
                <button
                  key={p.m}
                  className={`chip ${duration === p.m ? "chip--active" : ""}`}
                  onClick={() => setDuration(p.m)}
                  type="button"
                >
                  {p.label}
                </button>
              ))}
            </div>
          </div>
        )}

        {/* –ö–∞–∫–æ–π —Ü–≤–µ—Ç */}
        <div className="section">
          <div className="section-title">–ö–∞–∫–æ–π —Ü–≤–µ—Ç?</div>
          <div className="colors">
            {COLORS.map((c) => (
              <button
                key={c}
                className={`color ${color === c ? "color--active" : ""}`}
                style={{ "--c": c }}
                onClick={() => setColor(c)}
                type="button"
                aria-label="—Ü–≤–µ—Ç"
              />
            ))}
          </div>
        </div>

        {/* –ö–∞–∫ —á–∞—Å—Ç–æ */}
        <div className="section">
          <div className="section-title">–ö–∞–∫ —á–∞—Å—Ç–æ?</div>
          <div className="chips">
            {[
              { k: "once", label: "–û–¥–∏–Ω —Ä–∞–∑" },
              { k: "daily", label: "–ï–∂–µ–¥–Ω–µ–≤–Ω–æ" },
              { k: "weekly", label: "–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ" },
              { k: "monthly", label: "–ï–∂–µ–º–µ—Å—è—á–Ω–æ" },
            ].map((o) => (
              <button
                key={o.k}
                className={`chip ${repeat === o.k ? "chip--active" : ""}`}
                onClick={() => setRepeat(o.k)}
                type="button"
              >
                {o.label}
              </button>
            ))}
          </div>
        </div>

        {/* –û–ø–æ–≤–µ—â–µ–Ω–∏—è ‚Äî –∑–∞–≥–ª—É—à–∫–∞ */}
        <div className="section">
          <div className="section-head">
            <div className="section-title">–ù—É–∂–Ω—ã –æ–ø–æ–≤–µ—â–µ–Ω–∏—è?</div>
            <span className="hint">–ü–æ–∑–∂–µ –ø–æ–¥–∫–ª—é—á–∏–º</span>
          </div>
          <div className="muted">üîî –í –º–æ–º–µ–Ω—Ç –Ω–∞—á–∞–ª–∞</div>
          <div className="muted">üîï –ó–∞ 15–º –¥–æ –Ω–∞—á–∞–ª–∞</div>
        </div>

        {/* –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏/–ø–æ–¥–∑–∞–¥–∞—á–∏ */}
        <div className="section">
          <div className="section-title">–ù—É–∂–Ω—ã –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏?</div>
          <button className="subtask-add" onClick={addSubtask} type="button">
            + –î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–∑–∞–¥–∞—á—É
          </button>
          {subtasks.length > 0 && (
            <ul className="subtasks">
              {subtasks.map((s) => (
                <li key={s.id}>
                  {s.text}
                  <button onClick={() => removeSubtask(s.id)} type="button">
                    √ó
                  </button>
                </li>
              ))}
            </ul>
          )}
          <textarea
            className="notes"
            placeholder="–ó–∞–º–µ—Ç–∫–∏, —Å—Å—ã–ª–∫–∏, —Ç–µ–ª–µ—Ñ–æ–Ω—ã‚Ä¶"
            value={notes}
            onChange={(e) => setNotes(e.target.value)}
          />
        </div>

        {/* –ö–Ω–æ–ø–∫–∞ ¬´–î–æ–±–∞–≤–∏—Ç—å¬ª ‚Äî —Å–∫—Ä—ã–≤–∞–µ–º –µ—Å–ª–∏ –æ—Ç–∫—Ä—ã—Ç –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π —à–∏—Ç */}
        {!isTimePickerOpen && !isDurPickerOpen && (
          <button className="submit-btn" onClick={handleSubmit}>
            –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É
          </button>
        )}
      </div>

      {/* –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π —à–∏—Ç: –≤—ã–±–æ—Ä –≤—Ä–µ–º–µ–Ω–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ (–ø–æ–º–∏–Ω—É—Ç–Ω–æ) */}
      <div className={`inner-sheet ${isTimePickerOpen ? "inner-sheet--open" : ""}`}>
        <div
          className="inner-grabber"
          onTouchStart={(e) => {
            e.currentTarget._y0 = e.touches[0].clientY;
          }}
          onTouchMove={(e) => {
            const y = e.touches[0].clientY;
            const y0 = e.currentTarget._y0 ?? y;
            const dy = Math.max(0, y - y0);
            const panel = e.currentTarget.closest(".inner-sheet");
            if (panel) panel.style.transform = `translateY(${dy}px)`;
          }}
          onTouchEnd={(e) => {
            const panel = e.currentTarget.closest(".inner-sheet");
            if (!panel) return;
            const m = panel.style.transform.match(/translateY\((\d+)px\)/);
            const dy = m ? parseInt(m[1], 10) : 0;
            panel.style.transform = "";
            if (dy > 60) setIsTimePickerOpen(false);
          }}
        />
        <div className="inner-title">–í—ã–±–æ—Ä –≤—Ä–µ–º–µ–Ω–∏</div>
        <div className="inner-sub">–î–∞–Ω–Ω–∞—è –∑–∞–¥–∞—á–∞ –∑–∞–π–º—ë—Ç {totalHuman}</div>

        <div className="wheels">
          <WheelPicker ariaLabel="—á–∞—Å –Ω–∞—á–∞–ª–∞" values={hours} value={sh} onChange={setSh} />
          <WheelPicker ariaLabel="–º–∏–Ω—É—Ç—ã –Ω–∞—á–∞–ª–∞" values={MINS60} value={sm} onChange={setSm} />
          <div className="arrow">‚Üí</div>
          <WheelPicker
            ariaLabel="—á–∞—Å –∫–æ–Ω—Ü–∞"
            values={hours}
            value={new Date(startDate.getTime() + duration * 60000).getHours()}
            onChange={(h) => {
              const curEnd = new Date(startDate.getTime() + duration * 60000);
              const end = new Date(startDate);
              end.setHours(h, curEnd.getMinutes(), 0, 0);
              const m = Math.max(1, Math.round((end - startDate) / 60000));
              setDuration(m);
            }}
          />
          <WheelPicker
            ariaLabel="–º–∏–Ω—É—Ç—ã –∫–æ–Ω—Ü–∞"
            values={MINS60}
            value={new Date(startDate.getTime() + duration * 60000).getMinutes()}
            onChange={(m) => {
              const curEnd = new Date(startDate.getTime() + duration * 60000);
              const end = new Date(startDate);
              end.setHours(curEnd.getHours(), m, 0, 0);
              const minsDiff = Math.max(1, Math.round((end - startDate) / 60000));
              setDuration(minsDiff);
            }}
          />
        </div>

        <button className="inner-close" onClick={() => setIsTimePickerOpen(false)}>
          –ì–æ—Ç–æ–≤–æ
        </button>
      </div>

      {/* –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π —à–∏—Ç: –≤—ã–±–æ—Ä –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ */}
      <div className={`inner-sheet ${isDurPickerOpen ? "inner-sheet--open" : ""}`}>
        <div className="inner-grabber" />
        <div className="inner-title">–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å</div>

        <div className="wheels">
          <WheelPicker
            ariaLabel="—á–∞—Å—ã"
            values={Array.from({ length: 12 }, (_, i) => ({ label: String(i), value: i }))}
            value={Math.floor(duration / 60)}
            onChange={(h) => setDuration(h * 60 + (duration % 60))}
          />
          <WheelPicker
            ariaLabel="–º–∏–Ω—É—Ç—ã"
            values={[0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55].map((m) => ({
              label: mm2(m),
              value: m,
            }))}
            value={duration % 60}
            onChange={(m) => setDuration(Math.floor(duration / 60) * 60 + m)}
          />
        </div>

        <div className="dur-presets">
          {DUR_PRESETS.map((p) => (
            <button key={p.m} className="chip" onClick={() => setDuration(p.m)}>
              {p.label}
            </button>
          ))}
        </div>

        <button className="inner-close" onClick={() => setIsDurPickerOpen(false)}>
          –ì–æ—Ç–æ–≤–æ
        </button>
      </div>
    </div>
  );
}